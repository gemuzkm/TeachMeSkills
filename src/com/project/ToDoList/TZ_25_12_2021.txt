Те, кто не смог присутствовать на занятии.
Со следующей недели у вас начинаются каникулы. Продолжение занятий будет с 10-ого января. На каникулах не отдыхать, подтянуть все темы. Также, за каникулы вам необходимо написать проект, который закрепляет все знания, полученные во время изучения java core.

Проект - To do list
Это своего рода таск менеджер
Проект разделим на несколько этапов выполнения:

1) в проекте должно быть 2 обязательные сущности: Task и User. Task - сущность, которая описывает какую-либо задачу.

Из обязательных полей класса должны быть статус задачи (ограничимся тремя, To do - In progress - Done), пользователь,
который ответственен за выполнение задачи. User - сущность, описывающая пользователя. Все дополнительные поля вы
описываете самостоятельно по вашему усмотрению.

Из обязательной функциональности данного этапа: операции создания, удаления, обновления, вывода (вывод по id,
вывод всей инфы как минимум) каждой сущности, т.е. и для Task, и для User

2) После выполнение первого задания, можете приступать ко второму. Второе включает в себя добавление категории задачи (TaskCategory).
В обязательной функциональности должно быть точно также CRUD операции, как и в первой задаче, а также возможность добавления
задачи к какой-либо категории

3) Регистрация и авторизация. С этим, в целом, должно быть понятно, если пользователь на авторизован - доступа к
какой-либо функциональности кроме регистрации и авторизации у него нет.

4*) Добавление ролей для пользователя. Добавьте 2 типа роли - User и Manager.
Manager может выполнять любой тип операции над задачей, категорией и тд. User - обновление статуса задачи, вывод ее информации.

В проекте должно быть обязательно использование БД
Никакого хардкода в проекте не должно быть. Всю информацию вводить с клавиатуры. Валидировать все вводимые данные

Архитектура проекта следующая:

4 основные пакета(папки(package):
- controller - содержит классы, через которые пользователь взаимодействует с программой. Т.е. это классы меню
- entity - содержит классы-сущности, их описание
- repository - содержит классы, которые взаимодействуют с базой данных. В этих классах нужно описывать запросы
- service - содержит классы с бизнес-логикой приложения, т.е. это может быть создание ваших сущностей, какая-то фильтрация,
подсчет чего-либо, перевод задачи из задачи из одного статуса в другой

Использование такой архитектуры обязательно. В Main должно быть 2 строчки - создание объекта меню и вызов самого меню-метода.
По вашему усмотрению также могут быть добавлены и другие пакеты с классами, например, папка validator, в котором будет логика валидации данных, вводимых с клавиатуры.

Гудлак в написании, если будут вопросы - пишите